trigger:
  branches:
    include:
      - refs/tags/*
      - "*"
strategy:
  matrix:
    linux:
      imageName: 'ubuntu-20.04'
      rid: "linux-x64"
      PLATFORMLINKER: "clang-10.0"
      ExE_FILE_ExT: ""
    mac:
      imageName: 'macos-11'
      rid: "osx-x64"
      PLATFORMLINKER: ""
      ExE_FILE_ExT: ""
    windows:
      imageName: 'windows-2019'
      rid: "win-x64"
      PLATFORMLINKER: ""
      ExE_FILE_ExT: ".exe"
variables:
  - name: CppCompilerAndLinker
    value: "$(PLATFORMLINKER)"
pool:
  vmImage: $(imageName)

steps:
  - script: |
      sudo apt-get update
      sudo apt-get install -y libkrb5-dev
    condition: "eq(variables['imageName'],'ubuntu-20.04')"
    name: "install_packages"
  - task: UseDotNet@2
    inputs:
      version: "8.0.100"
  - task: DotNetCoreCLI@2
    name: "restore_solution"
    inputs:
      command: 'restore'
      projects: "dotnet-encoding.sln"
  - task: DotNetCoreCLI@2
    name: "build_solution"
    inputs:
      command: "build"
      configuration: "release"
      projects: "dotnet-encoding.sln"
  - task: DotNetCoreCLI@2
    name: "test_solution"
    inputs:
      command: "test"
      configuration: "Release"
      projects: "dotnet-encoding.sln"
  - task: DotNetCoreCLI@2
    name: "pack_solution"
    inputs:
      command: "pack"
      configuration: "release"
      packagesToPack: "dotnet-text-encoder/dotnet-text-encoder.csproj"
  - task: DotNetCoreCLI@2
    name: "publish_project"
    inputs:
      command: "custom"
      custom: "publish"
      arguments: "-c Release -p:PublishAot=true -p:RuntimeIdentifier=$(rid) -p:PackAsTool=false"
      projects: "dotnet-text-encoder/dotnet-text-encoder.csproj"
      publishWebProjects: false
      zipAfterPublish: false
  - task: Bash@3
    name: "test_native_file_execution"
    inputs:
      targetType: inline
      script: |
        artifacts/publish/dotnet-text-encoder/release_$(rid)/dtenc$(ExE_FILE_EXT) getinfo -c 0-100
  - task: CopyFiles@2
    name: "copying_native_file"
    inputs:
      sourceFolder: "artifacts/publish/dotnet-text-encoder/release_$(rid)"
      contents: "*.*"
      targetFolder: "$(Build.ArtifactStagingDirectory)"
  - task: Bash@3
    name: "rename_native_file_linux_mac"
    inputs:
      targetType: inline
      script: |
        mv $(Build.ArtifactStagingDirectory)/dtenc$(EXE_FILE_ExT) $(Build.ArtifactStagingDirectory)/dtenc-$(rid)$(EXE_FILE_EXT)
    condition: "or(eq(variables['rid'], 'linux-x64'), eq(variables['rid'], 'osx-x64'))"
  - task: Bash@3
    name: "strip_native_file_linux"
    inputs:
      targetType: inline
      script: |
        strip $(Build.ArtifactStagingDirectory)/dtenc-$(rid)$(EXE_FILE_EXT)
    condition: "eq(variables['rid'], 'linux-x64')"
  - task: Powershell@2
    name: "rename_native_file_win"
    inputs:
      targetType: inline
      script: |
        Move-Item $(Build.ArtifactStagingDirectory)/dtenc$(ExE_FILE_ExT) $(Build.ArtifactStagingDirectory)/dtenc-$(rid)$(ExE_FILE_ExT)
    condition: "eq(variables['rid'], 'win-x64')"
  - task: CopyFiles@2
    name: "copying_nupkg"
    inputs:
      sourceFolder: "artifacts/package/release"
      contents: "**/*.nupkg"
      targetFolder: "$(Build.ArtifactStagingDirectory)"
    condition: "eq(variables['rid'], 'win-x64')"
  - task: PublishBuildArtifacts@1
    name: "publishing_artifacts"
    inputs:
      pathToPublish: "$(Build.ArtifactStagingDirectory)"
      artifactName: "dotnet-tenc-$(rid)"
